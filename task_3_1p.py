# -*- coding: utf-8 -*-
"""Task 3.1P

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGTJ3fT2i8j_nGJM8plUOuBryf7syCUa

# **SIT719 Security and Privacy Issues in Analytics**

# Pass Task 3.1: Collection of scikit-learn commands for machine learning

**Importing and Loading data for preprocessing**
"""

import pandas as pd
#This command will import the Pandas library and assign it as pd.

from sklearn.metrics import confusion_matrix
#This command will import 'confusion_matrix' function from the 'sklearn.metrics' module which is an useful tool for evaluating the performance of a classification model.

dfp = pd.read_csv('payment_fraud.csv')
#This command reads the CSV file named 'payment_fraud.csv' that we uploaded in this notebook into Pandas DataFrame named 'dfp'.
#We downloaded the csv file from Dekincloud weekly datasets and codes for week 3 and uploaded in nootbook using files feature.
#The dataset consist of 39,221 Rows and 6 columns.

df = pd.get_dummies(dfp, columns=['paymentMethod'])
#We have a column 'paymentMethod' with non-numerical type also called categorical variable. Now, This command converts categorical varibales to numeric in column 'paymentMethod' and assigns it to DataFrame named 'df'.
#In the output, we can see a new DataFrame 'df' is created which has 8 columns with the value of 'paymentMethod' column converted into 3 numeric columns 'paymentMethod_creditcard', 'paymentMethod_paypal'	and 'paymentMethod_storecredit'

"""**Splitting the Dataset**"""

from sklearn.model_selection import train_test_split
#This command imports the train_test_split function from sklearn.model_selection which is used to split a dataset into two subsets: Training and Testing.

X_train, X_test, y_train, y_test = train_test_split(df.drop('label', axis=1), df['label'], test_size=0.5, random_state=17)

#The train_test_split command splits the 'df' dataset into training and testing sets.
#The features are represented by 'X' and the target variable is denoted by 'y'. We used 'test_size=0.33' to specify half of the data for training and remaninghalf for testing to check the performance for the algorithm.

"""**Importing and Training the Logistic Regression Model**"""

from sklearn.linear_model import LogisticRegression
#This command is used to import 'LogisticRegression' function from 'sklearn.linear_model". It is used to predict the probability of a binary outcome based on one or more variables.

clf = LogisticRegression()
#This code initialize Logistic Recression classifier named 'clf'.

clf.fit(X_train, y_train)
#Here'X_train' and 'Y_train" are fed into 'clf.fit()' function which trains the classifier and stores in 'clf' object.

"""**Making Predictions**"""

y_pred = clf.predict(X_test)
#This code predicts the labels 'y' for the test set 'X_test' using the trained Logistic Regression classifier 'clf'.

"""**Evaluating Model Performance**"""

from sklearn.metrics import accuracy_score
#This code imports the 'accuracy_score' function from the 'sklearn.metrics' module which is used to evaluate the performance of the model.

accuracy = accuracy_score(y_test, y_pred)
#Now we are calculating the accuracy score and storing the result in 'accuracy' object.

print("Accuracy:", accuracy)
#Now we are displaying the accuracy score.

"""The above result shows accuracy of 1.0 (100%) which means there are no incorrect predections and the model achived perfect accuracy on the given data."""